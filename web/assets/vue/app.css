
tr td {
  transition: ease opacity 0.2s;
}
tr.todo.completed td:not(.complete):not(.remove) {
  opacity: 0.2;
  transition: ease opacity 0.2s;
}
.switch {
  position: relative;
  display: inline-block;
  width: 2.5em;
  height: 1.6em;
}
.switch input {
  display: none;
}
.slider {
  position: absolute;
  cursor: pointer;
  overflow: hidden;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #f2f2f2;
  transition: 0.2s;
}
.slider:before {
  position: absolute;
  z-index: 2;
  content: "";
  height: 20px;
  width: 20px;
  left: 2px;
  bottom: 1px;
  background-color: #101010;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.22);
  transition: all 0.2s ease-in-out;
}
.slider:after {
  position: absolute;
  left: 0;
  z-index: 1;
  content: "";
  font-size: 1em;
  text-align: left !important;
  line-height: 95px;
  padding-left: 0;
  width: 1em;
  color: #fff;
  height: 1.6em;
  border-radius: 100px;
  background-color: #337ab7;
  transform: translateX(-1em);
  transition: all 0.4s ease-in-out;
}
.slider.checked:after {
  transform: translateX(0px);
  /*width: 235px;*/
  padding-left: 35px;
}
.slider.checked:before {
  background-color: #fff;
}
.slider.checked:before {
  transform: translateX(1em);
}

/* Rounded sliders */
.slider.round {
  border-radius: 100px;
}
.slider.round:before {
  border-radius: 50%;
}
.absolute-no {
  position: absolute;
  left: 0;
  color: #101010;
  text-align: right !important;
  font-size: 1rem;
  width: calc(100% - 25px);
  height: 1em;
  line-height: 2em;
  cursor: pointer;
  z-index: 10;
}


input[type=text] {
  padding: .5rem 1rem;
}


input[type=text] {
  padding: .5rem 1rem;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/