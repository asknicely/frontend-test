
tr td {
  transition: ease opacity 0.2s;
}
tr.todo.completed td:not(.complete):not(.remove) {
  opacity: 0.2;
  transition: ease opacity 0.2s;
}
tbody tr.is-visible {
  opacity: 1;
  transform: translateX(0);
  transition: opacity 0.2s linear;
}
tbody tr:not(.is-visible) {
  opacity: 0;
  transform: translateX(20px);
  transition: transform 0.1s linear, opacity 0.2s linear;
}
.todo-item__link {
  background: transparent;
  border: 0;
  padding: 0;
  text-align: left;
  white-space: inherit;
}
.todo-item__checkbox {
  align-items: center;
  position: relative;
  display: flex;
  justify-content: center;
}
.todo-item__btn {
  display: none;
}
.todo-item__check.checked ~ .todo-item__circle-1 {
  animation: circle 0.6s forwards;
}
.todo-item__check.checked ~ .todo-item__circle-2 {
  animation: circle 0.5s ease 0.1s forwards;
}
.todo-item__check.checked .todo-item__inner-check {
  animation: inner-check 0.6s cubic-bezier(0.1, 1, 0.1, 1) forwards;
}
.todo-item__check {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  height: 20px;
  width: 20px;
  background: #20cc82;
  border-radius: 50%;
}
.todo-item__check .todo-item__inner-check {
  box-shadow: 0 0 8px rgba(0, 0, 0, 0.4);
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: #fff;
  transform: scale(0);
  animation: inner-check-rev 0.5s;
}
.todo-item__circle-1,
.todo-item__circle-2 {
  position: absolute;
  width: 35px;
  height: 35px;
  transform: scale(0);
  border-radius: 50%;
  border: 4px solid #8bbabb;
  animation: circle-rev 0.5s;
}
.todo-item__circle-2 {
  width: 50px;
  height: 50px;
}
.todo-item__circle-2 .todo-item__line-group {
  height: 14px;
  width: 2px;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
}
.todo-item__circle-2 .todo-item__line-group .todo-item__line {
  position: absolute;
  width: 2px;
  height: 14px;
  background: #8bbabb;
}
.todo-item__line:nth-child(1) {
  transform: rotate(360deg / 10 * 1) translateY(-80px);
}
.todo-item__line:nth-child(2) {
  transform: rotate(360deg / 10 * 2) translateY(-80px);
}
.todo-item__line:nth-child(3) {
  transform: rotate(360deg / 10 * 3) translateY(-80px);
}
.todo-item__line:nth-child(4) {
  transform: rotate(360deg / 10 * 4) translateY(-80px);
}
.todo-item__line:nth-child(5) {
  transform: rotate(360deg / 10 * 5) translateY(-80px);
}
.todo-item__line:nth-child(6) {
  transform: rotate(360deg / 10 * 6) translateY(-80px);
}
.todo-item__line:nth-child(7) {
  transform: rotate(360deg / 10 * 7) translateY(-80px);
}
.todo-item__line:nth-child(8) {
  transform: rotate(360deg / 10 * 8) translateY(-80px);
}
.todo-item__line:nth-child(9) {
  transform: rotate(360deg / 10 * 9) translateY(-80px);
}
.todo-item__line:nth-child(10) {
  transform: rotate(360deg / 10 * 10) translateY(-80px);
}
@keyframes circle {
0% {
    transform: scale(1);
    opacity: 0;
}
50% {
    opacity: 1;
}
100% {
    transform: scale(0);
}
}
@keyframes circle-rev {
0% {
    transform: scale(0);
}
50% {
    opacity: 1;
}
100% {
    transform: scale(1);
    opacity: 0;
}
}
@keyframes inner-check {
0% {
    transform: scale(0);
}
100% {
    transform: scale(1);
}
}
@keyframes inner-check-rev {
0% {
    transform: scale(1);
}
100% {
    transform: scale(0);
}
}


.btn-primary {
  background-color: #3399ff;
  border-color: #3399ff;
}
.todos-list__add {
  background-color: #3399ff;
  color: #fff;
}
.todos-list__description {
  display: inline-block;
  position: relative;
}
.todos-list-description__input {
  border: 0;
  padding: 0.5rem 0rem;
  border: 0;
  border-bottom: 1px solid #ccc;
}
.todos-list-description__input:focus {
  outline: 0;
}
.todos-list-description__input ~ .focus-border {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  background-color: #3399ff;
  transition: 0.4s;
}
.todos-list-description__input:focus ~ .focus-border {
  width: 100%;
  transition: 0.4s;
}
tfoot td {
  position: relative;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/