
tr td {
  transition: ease opacity 0.2s;
}
tr.todo.completed td:not(.complete):not(.remove) {
  opacity: 0.2;
  transition: ease opacity 0.2s;
}
.todo-item__link {
  background: transparent;
  border: 0;
  color: #3399ff;
  padding: 0;
  text-align: left;
  white-space: inherit;
}
.switch {
  position: relative;
  display: inline-block;
  margin: 0;
  width: 2.5em;
  height: 1.6em;
}
.switch input {
  display: none;
}
.slider {
  position: absolute;
  cursor: pointer;
  overflow: hidden;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #f2f2f2;
  transition: 0.2s;
}
.slider:before {
  position: absolute;
  z-index: 2;
  content: "";
  height: 20px;
  width: 20px;
  left: 2px;
  bottom: 1px;
  background-color: #101010;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.22);
  transition: all 0.2s ease-in-out;
}
.slider:after {
  position: absolute;
  left: 0;
  z-index: 1;
  content: "";
  font-size: 1em;
  text-align: left !important;
  line-height: 95px;
  padding-left: 0;
  width: 1em;
  color: #fff;
  height: 1.6em;
  border-radius: 100px;
  background-color: #3399ff;
  transform: translateX(-1em);
  transition: all 0.4s ease-in-out;
}
.slider.checked:after {
  transform: translateX(0px);
  /*width: 235px;*/
  padding-left: 35px;
}
.slider.checked:before {
  background-color: #fff;
}
.slider.checked:before {
  transform: translateX(1em);
}

/* Rounded sliders */
.slider.round {
  border-radius: 100px;
}
.slider.round:before {
  border-radius: 50%;
}
.absolute-no {
  position: absolute;
  left: 0;
  color: #101010;
  text-align: right !important;
  font-size: 1rem;
  width: calc(100% - 25px);
  height: 1em;
  line-height: 2em;
  cursor: pointer;
  z-index: 10;
}


.btn-primary {
  background-color: #3399ff;
  border-color: #3399ff;
}
.todos-list__add {
  background-color: #3399ff;
  color: #fff;
}
.todos-list__description {
  display: inline-block;
  position: relative;
}
.todos-list-description__input {
  border: 0;
  padding: 0.5rem 0rem;
  border: 0;
  border-bottom: 1px solid #ccc;
}
.todos-list-description__input:focus {
  outline: 0;
}
.todos-list-description__input ~ .focus-border {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  background-color: #3399ff;
  transition: 0.4s;
}
.todos-list-description__input:focus ~ .focus-border {
  width: 100%;
  transition: 0.4s;
}
tfoot td {
  position: relative;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/